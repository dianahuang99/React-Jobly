{"version":3,"sources":["JoblyAPI.js","userContext.js","NavBar.js","CompaniesList.js","Job.js","Company.js","Home.js","SignUpForm.js","JobsList.js","LoginForm.js","UpdateProfileForm.js","PrivateRoute.js","Routes.js","hooks/useLocalStorage.js","App.js","serviceWorker.js","index.js"],"names":["BASE_URL","process","JoblyApi","endpoint","data","method","console","debug","url","headers","Authorization","token","params","axios","error","response","message","Array","isArray","handle","this","request","res","company","companies","jobs","query","username","user","jobId","userContext","React","createContext","NavBar","logout","currentUser","useContext","expand","exact","to","className","navbar","onClick","firstName","CompaniesList","filterCompanies","useState","setCompanies","INITIAL_STATE","name","formData","setFormData","isLoading","setIsLoading","useEffect","getCompanies","handleSubmit","e","preventDefault","result","Form","onSubmit","Group","Label","Control","id","value","onChange","evt","target","fData","placeholder","required","Button","variant","type","length","map","description","Job","title","companyName","salary","equity","hasAppliedToJob","applyToJob","applied","setApplied","toLocaleString","disabled","Company","cantFind","getCompany","useParams","setCompany","history","useHistory","foundCompany","log","push","getCompanyDetails","numEmployees","job","Home","SignUpForm","register","password","lastName","email","formErrors","setFormErrors","success","errors","handleChange","err","usernname","JobsList","setJobs","getJobs","filterJobs","LoginForm","login","UpdateProfileForm","UserContext","setCurrentUser","saveConfirmed","setSaveConfirmed","profileData","updateUser","updatedUser","f","PrivateRoute","path","children","Routes","useLocalStorage","key","firstValue","initialValue","localStorage","getItem","item","setItem","removeItem","App","setToken","Set","applicationIds","setApplicationIds","sucess","has","jwt","decode","getUser","applications","getCurrentUser","Provider","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.51a44186.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\";\n\n/** API Class.\n *\n * Static class tying together methods used to get/send to to the API.\n * There shouldn't be any frontend-specific stuff here, and there shouldn't\n * be any API-aware stuff elsewhere in the frontend.\n *\n */\n\nclass JoblyApi {\n  // the token for interactive with the API will be stored here.\n  static token;\n\n  static async request(endpoint, data = {}, method = \"get\") {\n    console.debug(\"API Call:\", endpoint, data, method);\n\n    //there are multiple ways to pass an authorization token, this is how you pass it in the header.\n    //this has been provided to show you another way to pass the token. you are only expected to read this code for this project.\n    const url = `${BASE_URL}/${endpoint}`;\n    const headers = { Authorization: `Bearer ${JoblyApi.token}` };\n    const params = method === \"get\" ? data : {};\n\n    try {\n      return (await axios({ url, method, data, params, headers })).data;\n    } catch (err) {\n      console.error(\"API Error:\", err.response);\n      let message = err.response.data.error.message;\n      throw Array.isArray(message) ? message : [message];\n    }\n  }\n\n  // Individual API routes\n\n  /** Get details on a company by handle. */\n\n  static async getCompany(handle) {\n    let res = await this.request(`companies/${handle}`);\n    return res.company;\n  }\n\n  /** Get all companies. */\n\n  static async getCompanies() {\n    let res = await this.request(`companies`);\n    return res.companies;\n  }\n\n  /** Get all jobs. */\n\n  static async getJobs() {\n    let res = await this.request(`jobs`);\n    return res.jobs;\n  }\n\n  /** Register a user. */\n\n  static async register(data) {\n    let res = await this.request(`auth/register`, data, \"post\");\n    return res.token;\n  }\n\n  /** Logs in a user */\n\n  static async login(data) {\n    let res = await this.request(`auth/token`, data, \"post\");\n    return res.token;\n  }\n\n  /** Filters the companies with a search term. */\n\n  static async filterCompanies(query) {\n    let res = await this.request(`companies`, query);\n    return res;\n  }\n\n  /** Filters the jobs with a search term. */\n\n  static async filterJobs(query) {\n    let res = await this.request(`jobs`, query);\n    return res;\n  }\n\n  static async getUser(username) {\n    let res = await this.request(`users/${username}`);\n    return res.user;\n  }\n\n  static async updateUser(username, data) {\n    let res = await this.request(`users/${username}`, data, \"patch\");\n    return res.user;\n  }\n\n  static async applyToJob(username, jobId) {\n    let res = await this.request(`users/${username}/jobs/${jobId}`, {}, \"post\");\n    return res;\n  }\n}\n\nexport default JoblyApi;\n","import React from \"react\";\n\nconst userContext = React.createContext();\n\nexport default userContext;\n","import React, { useContext } from \"react\";\nimport \"./NavBar.css\";\nimport { NavLink } from \"react-router-dom\";\nimport { Navbar, Nav, NavItem } from \"reactstrap\";\nimport userContext from \"./userContext\";\n\nfunction NavBar({ logout }) {\n  const { currentUser } = useContext(userContext);\n  const loggedInNav = () => {\n    return (\n      <div>\n        <Navbar expand=\"md\">\n          <NavLink exact to=\"/\" className=\"navbar-brand\">\n            Jobly\n          </NavLink>\n\n          <Nav className=\"ml-auto\" navbar>\n            <NavItem>\n              <NavLink to=\"/companies\">Companies</NavLink>\n            </NavItem>\n            <NavItem>\n              <NavLink to=\"/jobs\">Jobs</NavLink>\n            </NavItem>\n            <NavItem>\n              <NavLink to=\"/profile\">Profile</NavLink>\n            </NavItem>\n            <NavItem>\n              <NavLink to=\"/\" onClick={logout}>\n                Log Out {currentUser.firstName || currentUser.username}\n              </NavLink>\n            </NavItem>\n          </Nav>\n        </Navbar>\n      </div>\n    );\n  };\n\n  const loggedOutNav = () => {\n    return (\n      <div>\n        <Navbar expand=\"md\">\n          <NavLink exact to=\"/\" className=\"navbar-brand\">\n            Jobly\n          </NavLink>\n          <Nav className=\"ml-auto\" navbar>\n            <NavItem>\n              <NavLink to=\"/login\">Login</NavLink>\n            </NavItem>\n            <NavItem>\n              <NavLink to=\"/signup\">Sign Up</NavLink>\n            </NavItem>\n          </Nav>\n        </Navbar>\n      </div>\n    );\n  };\n\n  return <> {currentUser ? loggedInNav() : loggedOutNav()}</>;\n}\n\nexport default NavBar;\n","import React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./List.css\";\nimport {\n  Card,\n  CardBody,\n  CardTitle,\n  CardText,\n  ListGroup,\n  ListGroupItem,\n} from \"reactstrap\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport JoblyApi from \"./JoblyAPI\";\n\nfunction CompaniesList({ filterCompanies }) {\n  const [companies, setCompanies] = useState([]);\n  const INITIAL_STATE = {\n    name: \"\",\n  };\n  const [formData, setFormData] = useState(INITIAL_STATE);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    async function getCompanies() {\n      let companies = await JoblyApi.getCompanies();\n      setCompanies(companies);\n      setIsLoading(false);\n    }\n    getCompanies();\n  }, []);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setFormData(INITIAL_STATE);\n    let result = await JoblyApi.filterCompanies(formData);\n    setCompanies(result.companies);\n  };\n\n  if (isLoading) return <h3>Loading...</h3>;\n\n  /** Update local state w/curr state of input elem */\n\n  const handleChange = (evt) => {\n    const { name, value } = evt.target;\n    setFormData((fData) => ({\n      ...fData,\n      [name]: value,\n    }));\n  };\n  return (\n    <section className=\"col-md-9\">\n      <Card>\n        <CardBody>\n          <CardTitle className=\"font-weight-bold text-center\">\n            Companies List\n          </CardTitle>\n\n          <Form onSubmit={handleSubmit}>\n            <Form.Group className=\"mb-3\">\n              <Form.Label></Form.Label>\n              <Form.Control\n                id=\"name\"\n                name=\"name\"\n                value={formData.name}\n                onChange={handleChange}\n                placeholder=\"Enter search term...\"\n                required\n              />\n            </Form.Group>\n\n            <Button variant=\"info\" type=\"submit\">\n              Submit\n            </Button>\n          </Form>\n          <ListGroup>\n            {companies.length ? (\n              companies.map((company) => (\n                <Link to={`/companies/${company.handle}`} key={company.handle}>\n                  <ListGroupItem>\n                    <h3> {company.name}</h3>\n\n                    <p>{company.description}</p>\n                  </ListGroupItem>\n                </Link>\n              ))\n            ) : (\n              <p>Sorry, no results were found!</p>\n            )}\n          </ListGroup>\n        </CardBody>\n      </Card>\n    </section>\n  );\n}\n\nexport default CompaniesList;\n","import React, { useContext, useState, useEffect } from \"react\";\nimport userContext from \"./userContext\";\nimport Button from \"react-bootstrap/Button\";\n\nconst Job = ({ id, title, companyName, salary, equity }) => {\n  const { hasAppliedToJob, applyToJob } = useContext(userContext);\n  const [applied, setApplied] = useState();\n\n  useEffect(\n    function updateAppliedStatus() {\n      setApplied(hasAppliedToJob(id));\n    },\n    [id, hasAppliedToJob]\n  );\n\n  async function handleApply(evt) {\n    if (hasAppliedToJob(id)) return;\n    applyToJob(id);\n    setApplied(true);\n  }\n\n  return (\n    <>\n      <h2> {title}</h2>\n      <h5>{companyName}</h5>\n      <p>Salary: {salary ? salary.toLocaleString(\"en-US\") : 0}</p>\n      <p>Equity: {equity ? equity : 0}</p>\n      <Button variant={\"danger\"} onClick={handleApply} disabled={applied}>\n        {applied ? \"Applied\" : \"Apply\"}\n      </Button>\n    </>\n  );\n};\n\nexport default Job;\n","import React, { useEffect, useState, useContext } from \"react\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport { Card, CardBody, CardTitle, CardText, ListGroupItem } from \"reactstrap\";\nimport userContext from \"./userContext\";\nimport Job from \"./Job\";\n\nfunction Company({ cantFind, getCompany }) {\n  const { handle } = useParams();\n  const [company, setCompany] = useState({});\n  const [isLoading, setIsLoading] = useState(true);\n  const history = useHistory();\n  const { currentUser } = useContext(userContext);\n\n  useEffect(() => {\n    async function getCompanyDetails() {\n      try {\n        const foundCompany = await getCompany(handle);\n        setCompany(foundCompany);\n        console.log(currentUser);\n        setIsLoading(false);\n      } catch (e) {\n        setIsLoading(false);\n        history.push(cantFind);\n      }\n    }\n    getCompanyDetails();\n  }, []);\n\n  if (isLoading) return <h3>Loading...</h3>;\n\n  return (\n    <section>\n      <Card>\n        <CardBody>\n          <CardTitle className=\"font-weight-bold text-center\">\n            {company.name}\n          </CardTitle>\n          <CardText className=\"font-italic\">{company.description}</CardText>\n\n          <p>\n            <b>Employees:</b> {company.numEmployees}\n          </p>\n\n          {company.jobs\n            ? company.jobs.map((job) => (\n                <ListGroupItem>\n                  <Job\n                    id={job.id}\n                    title={job.title}\n                    companyName={job.companyName}\n                    salary={job.salary}\n                    equity={job.equity}\n                  />\n                </ListGroupItem>\n              ))\n            : null}\n        </CardBody>\n      </Card>\n    </section>\n  );\n}\n\nexport default Company;\n","import React, { useContext } from \"react\";\nimport { Card, CardBody, CardTitle } from \"reactstrap\";\nimport userContext from \"./userContext\";\nimport Button from \"react-bootstrap/Button\";\nimport { NavLink } from \"react-router-dom\";\n\nfunction Home() {\n  const { currentUser } = useContext(userContext);\n  return (\n    <section className=\"col-md-8\">\n      <Card>\n        <CardBody className=\"text-center\">\n          <CardTitle>\n            <h1 className=\"font-weight-bold\">Jobly</h1>\n          </CardTitle>\n          <p>All the jobs in one, convenient place.</p>\n          <h3>\n            {currentUser ? (\n              `Welcome back ${currentUser.firstName}`\n            ) : (\n              <>\n                {\" \"}\n                <NavLink to=\"/login\">\n                  <Button variant=\"info\">Login</Button>\n                </NavLink>{\" \"}\n                <NavLink to=\"/signup\">\n                  <Button variant=\"info\">Sign Up</Button>\n                </NavLink>\n              </>\n            )}\n          </h3>\n        </CardBody>\n      </Card>\n    </section>\n  );\n}\n\nexport default Home;\n","import React, { useState } from \"react\";\nimport { Card, CardBody, CardTitle } from \"reactstrap\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport { useHistory } from \"react-router-dom\";\n\nconst SignUpForm = ({ register }) => {\n  const INITIAL_STATE = {\n    username: \"\",\n    password: \"\",\n    firstName: \"\",\n    lastName: \"\",\n    email: \"\",\n  };\n  const [formData, setFormData] = useState(INITIAL_STATE);\n  const [formErrors, setFormErrors] = useState([]);\n  const history = useHistory();\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setFormData(INITIAL_STATE);\n    let result = await register(formData);\n    if (result.success) {\n      history.push(\"/companies\");\n    } else {\n      console.log(\"errors\" + result.errors);\n      setFormErrors(result.errors);\n    }\n    console.log(formErrors);\n  };\n\n  /** Update local state w/curr state of input elem */\n\n  const handleChange = (evt) => {\n    const { name, value } = evt.target;\n    setFormData((fData) => ({\n      ...fData,\n      [name]: value,\n    }));\n  };\n\n  return (\n    <section className=\"col-md-9\">\n      <Card>\n        <CardBody>\n          {formErrors.length ? formErrors.map((err) => <p>{err}</p>) : null}\n          <CardTitle className=\"font-weight-bold text-center\">\n            Sign Up\n          </CardTitle>\n          <Form onSubmit={handleSubmit}>\n            <Form.Group className=\"mb-3\">\n              <Form.Label>Username</Form.Label>\n              <Form.Control\n                id=\"username\"\n                name=\"username\"\n                value={formData.usernname}\n                onChange={handleChange}\n                required\n              />\n            </Form.Group>\n\n            <Form.Group className=\"mb-3\">\n              <Form.Label>Password</Form.Label>\n              <Form.Control\n                type=\"password\"\n                id=\"password\"\n                name=\"password\"\n                value={formData.password}\n                onChange={handleChange}\n                required\n              />\n            </Form.Group>\n\n            <Form.Group className=\"mb-3\">\n              <Form.Label>First Name</Form.Label>\n              <Form.Control\n                id=\"firstName\"\n                name=\"firstName\"\n                value={formData.firstName}\n                onChange={handleChange}\n                required\n              />\n            </Form.Group>\n\n            <Form.Group className=\"mb-3\">\n              <Form.Label>Last Name</Form.Label>\n              <Form.Control\n                id=\"lastName\"\n                name=\"lastName\"\n                value={formData.lastName}\n                onChange={handleChange}\n                required\n              />\n            </Form.Group>\n\n            <Form.Group className=\"mb-3\">\n              <Form.Label>Email</Form.Label>\n              <Form.Control\n                id=\"email\"\n                name=\"email\"\n                value={formData.email}\n                onChange={handleChange}\n                required\n              />\n            </Form.Group>\n\n            <Button variant=\"dark\" type=\"submit\">\n              Submit\n            </Button>\n          </Form>\n        </CardBody>\n      </Card>\n    </section>\n  );\n};\n\nexport default SignUpForm;\n","import React, { useState, useEffect } from \"react\";\nimport \"./List.css\";\nimport {\n  Card,\n  CardBody,\n  CardTitle,\n  ListGroup,\n  ListGroupItem,\n} from \"reactstrap\";\nimport JoblyApi from \"./JoblyAPI\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport Job from \"./Job\";\n\nfunction JobsList() {\n  const [jobs, setJobs] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const INITIAL_STATE = {\n    title: \"\",\n  };\n  const [formData, setFormData] = useState(INITIAL_STATE);\n\n  useEffect(() => {\n    async function getJobs() {\n      let jobs = await JoblyApi.getJobs();\n      setJobs(jobs);\n      setIsLoading(false);\n    }\n    getJobs();\n  }, []);\n\n  if (isLoading) return <h3>Loading...</h3>;\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setFormData(INITIAL_STATE);\n    let result = await JoblyApi.filterJobs(formData);\n    setJobs(result.jobs);\n  };\n\n  /** Update local state w/curr state of input elem */\n\n  const handleChange = (evt) => {\n    const { name, value } = evt.target;\n    setFormData((fData) => ({\n      ...fData,\n      [name]: value,\n    }));\n  };\n\n  return (\n    <section className=\"col-md-9\">\n      <Card>\n        <CardBody>\n          <CardTitle className=\"font-weight-bold text-center\">\n            Jobs List\n          </CardTitle>\n          <Form onSubmit={handleSubmit}>\n            <Form.Group className=\"mb-3\">\n              <Form.Label></Form.Label>\n              <Form.Control\n                id=\"title\"\n                name=\"title\"\n                value={formData.title}\n                onChange={handleChange}\n                placeholder=\"Enter search term...\"\n                required\n              />\n            </Form.Group>\n\n            <Button variant=\"info\" type=\"submit\">\n              Submit\n            </Button>\n          </Form>\n\n          <ListGroup>\n            {jobs.length ? (\n              jobs.map((job) => (\n                <ListGroupItem>\n                  <Job\n                    id={job.id}\n                    title={job.title}\n                    companyName={job.companyName}\n                    salary={job.salary}\n                    equity={job.equity}\n                  />\n                </ListGroupItem>\n              ))\n            ) : (\n              <p>Sorry, no results were found!</p>\n            )}\n          </ListGroup>\n        </CardBody>\n      </Card>\n    </section>\n  );\n}\n\nexport default JobsList;\n","import React, { useState } from \"react\";\nimport { Card, CardBody, CardTitle, CardText } from \"reactstrap\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport { useHistory } from \"react-router-dom\";\n\nconst LoginForm = ({ login }) => {\n  const INITIAL_STATE = {\n    username: \"\",\n    password: \"\",\n  };\n  const [formData, setFormData] = useState(INITIAL_STATE);\n  const [formErrors, setFormErrors] = useState([]);\n  const history = useHistory();\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setFormData(INITIAL_STATE);\n    let result = await login(formData);\n    console.log(result);\n    if (result.success) {\n      history.push(\"/companies\");\n    } else {\n      console.log(\"errors\" + result.errors);\n      setFormErrors(result.errors);\n    }\n    console.log(formErrors);\n  };\n\n  /** Update local state w/curr state of input elem */\n\n  const handleChange = (evt) => {\n    const { name, value } = evt.target;\n    setFormData((fData) => ({\n      ...fData,\n      [name]: value,\n    }));\n  };\n\n  return (\n    <section className=\"col-md-9\">\n      <Card>\n        <CardBody>\n          {formErrors.length ? formErrors.map((err) => <p>{err}</p>) : null}\n          <CardTitle className=\"font-weight-bold text-center\">Log In</CardTitle>\n          <Form onSubmit={handleSubmit}>\n            <Form.Group className=\"mb-3\">\n              <Form.Label>Username</Form.Label>\n              <Form.Control\n                id=\"username\"\n                name=\"username\"\n                value={formData.usernname}\n                onChange={handleChange}\n                required\n              />\n            </Form.Group>\n\n            <Form.Group className=\"mb-3\">\n              <Form.Label>Password</Form.Label>\n              <Form.Control\n                type=\"password\"\n                id=\"password\"\n                name=\"password\"\n                value={formData.password}\n                onChange={handleChange}\n                required\n              />\n            </Form.Group>\n\n            <Button variant=\"dark\" type=\"submit\">\n              Submit\n            </Button>\n          </Form>\n        </CardBody>\n      </Card>\n    </section>\n  );\n};\n\nexport default LoginForm;\n","import React, { useState, useContext } from \"react\";\nimport { Card, CardBody, CardTitle } from \"reactstrap\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport UserContext from \"./userContext\";\nimport JoblyApi from \"./JoblyAPI\";\n\nconst UpdateProfileForm = () => {\n  const { currentUser, setCurrentUser } = useContext(UserContext);\n  const INITIAL_STATE = {\n    username: currentUser.username,\n    firstName: currentUser.firstName,\n    lastName: currentUser.lastName,\n    email: currentUser.email,\n    password: \"\",\n  };\n  const [formData, setFormData] = useState(INITIAL_STATE);\n  const [formErrors, setFormErrors] = useState([]);\n\n  const [saveConfirmed, setSaveConfirmed] = useState(false);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    let profileData = {\n      firstName: formData.firstName,\n      lastName: formData.lastName,\n      email: formData.email,\n      password: formData.password,\n    };\n\n    let username = formData.username;\n    let updatedUser;\n\n    try {\n      updatedUser = await JoblyApi.updateUser(username, profileData);\n    } catch (errors) {\n      setFormErrors(errors);\n    }\n\n    setFormData((f) => ({ ...f, password: \"\" }));\n    setFormErrors([]);\n    setSaveConfirmed(true);\n\n    setCurrentUser(updatedUser);\n  };\n\n  /** Update local state w/curr state of input elem */\n\n  const handleChange = (evt) => {\n    const { name, value } = evt.target;\n    setFormData((fData) => ({\n      ...fData,\n      [name]: value,\n    }));\n    setFormErrors([]);\n  };\n\n  return (\n    <section className=\"col-md-9\">\n      <Card>\n        <CardBody>\n          {formErrors.length ? formErrors.map((err) => <p>{err}</p>) : null}\n\n          {saveConfirmed ? <p>Updated successfully.</p> : null}\n\n          <CardTitle className=\"font-weight-bold text-center\">\n            Profile\n          </CardTitle>\n          <Form onSubmit={handleSubmit}>\n            <Form.Group className=\"mb-3\">\n              <Form.Label>Username</Form.Label>\n              <p>{formData.username}</p>\n            </Form.Group>\n\n            <Form.Group className=\"mb-3\">\n              <Form.Label>First Name</Form.Label>\n              <Form.Control\n                id=\"firstName\"\n                name=\"firstName\"\n                value={formData.firstName}\n                onChange={handleChange}\n                required\n              />\n            </Form.Group>\n\n            <Form.Group className=\"mb-3\">\n              <Form.Label>Last Name</Form.Label>\n              <Form.Control\n                id=\"lastName\"\n                name=\"lastName\"\n                value={formData.lastName}\n                onChange={handleChange}\n                required\n              />\n            </Form.Group>\n\n            <Form.Group className=\"mb-3\">\n              <Form.Label>Email</Form.Label>\n              <Form.Control\n                id=\"email\"\n                name=\"email\"\n                value={formData.email}\n                onChange={handleChange}\n                required\n              />\n            </Form.Group>\n\n            <Form.Group className=\"mb-3\">\n              <Form.Label>Please confirm password to make changes:</Form.Label>\n              <Form.Control\n                type=\"password\"\n                id=\"password\"\n                name=\"password\"\n                value={formData.password}\n                onChange={handleChange}\n                required\n              />\n            </Form.Group>\n\n            <Button variant=\"dark\" type=\"submit\">\n              Submit\n            </Button>\n          </Form>\n        </CardBody>\n      </Card>\n    </section>\n  );\n};\n\nexport default UpdateProfileForm;\n","import React, { useContext } from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport userContext from \"./userContext\";\n\n/** \"Higher-Order Component\" for private routes.\n *\n * In routing component, use these instead of <Route ...>. This component\n * will check if there is a valid current user and only continues to the\n * route if so. If no user is present, redirects to login form.\n */\n\nfunction PrivateRoute({ exact, path, children }) {\n  const { currentUser } = useContext(userContext);\n\n  console.debug(\n    \"PrivateRoute\",\n    \"exact=\",\n    exact,\n    \"path=\",\n    path,\n    \"currentUser=\",\n    currentUser\n  );\n\n  if (!currentUser) {\n    return <Redirect to=\"/login\" />;\n  }\n\n  return (\n    <Route exact={exact} path={path}>\n      {children}\n    </Route>\n  );\n}\n\nexport default PrivateRoute;\n","import React from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\nimport CompaniesList from \"./CompaniesList\";\nimport Company from \"./Company\";\nimport Home from \"./Home\";\nimport NewFoodForm from \"./SignUpForm\";\nimport JobsList from \"./JobsList\";\nimport LoginForm from \"./LoginForm\";\nimport UpdateProfileForm from \"./UpdateProfileForm\";\nimport PrivateRoute from \"./PrivateRoute\";\n\nconst Routes = ({ login, getCompany, register }) => (\n  <main>\n    <Switch>\n      <PrivateRoute exact path=\"/companies\">\n        <CompaniesList title=\"Companies\" />\n      </PrivateRoute>\n      <PrivateRoute path=\"/companies/:handle\">\n        <Company cantFind=\"/companies\" getCompany={getCompany} />\n      </PrivateRoute>\n      <PrivateRoute exact path=\"/jobs\">\n        <JobsList />\n      </PrivateRoute>\n      <PrivateRoute exact path=\"/profile\">\n        <UpdateProfileForm />\n      </PrivateRoute>\n      <Route exact path=\"/\">\n        <Home />\n      </Route>\n      <Route exact path=\"/signup\">\n        <NewFoodForm register={register} />\n      </Route>\n      <Route exact path=\"/login\">\n        <LoginForm login={login} />\n      </Route>\n\n      <Route>\n        <p>Hmmm. I can't seem to find what you want.</p>\n      </Route>\n    </Switch>\n  </main>\n);\n\nexport default Routes;\n","import { useState, useEffect } from \"react\";\n\n/** Custom hook for keeping state data synced with localStorage.\n *\n * This creates `item` as state and look in localStorage for current value\n * (if not found, defaults to `firstValue`)\n *\n * When `item` changes, effect re-runs:\n * - if new state is null, removes from localStorage\n * - else, updates localStorage\n *\n * To the component, this just acts like state that is also synced to/from\n * localStorage::\n *\n *   const [myThing, setMyThing] = useLocalStorage(\"myThing\")\n */\n\nfunction useLocalStorage(key, firstValue = null) {\n  const initialValue = localStorage.getItem(key) || firstValue;\n\n  const [item, setItem] = useState(initialValue);\n\n  useEffect(\n    function setKeyInLocalStorage() {\n      console.debug(\"hooks useLocalStorage useEffect\", \"item=\", item);\n\n      if (item === null) {\n        localStorage.removeItem(key);\n      } else {\n        localStorage.setItem(key, item);\n      }\n    },\n    [key, item]\n  );\n\n  return [item, setItem];\n}\n\nexport default useLocalStorage;\n","import React, { useState, useEffect } from \"react\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport \"./App.css\";\nimport JoblyApi from \"./JoblyAPI\";\nimport NavBar from \"./NavBar\";\nimport Routes from \"./Routes.js\";\nimport userContext from \"./userContext\";\nimport useLocalStorage from \"./hooks/useLocalStorage\";\nimport jwt from \"jsonwebtoken\";\n\nexport const TOKEN_STORAGE_ID = \"jobly-token\";\n\nfunction App() {\n  const [currentUser, setCurrentUser] = useState(null);\n  const [token, setToken] = useLocalStorage(TOKEN_STORAGE_ID);\n  const [isLoading, setIsLoading] = useState(false);\n  const [applicationIds, setApplicationIds] = useState(new Set([]));\n\n  useEffect(\n    function loadUserInfo() {\n      console.debug(\"App useEffect loadUserInfo\", \"token=\", token);\n\n      async function getCurrentUser() {\n        if (token) {\n          try {\n            let { username } = jwt.decode(token);\n            // put the token on the Api class so it can use it to call the API.\n            JoblyApi.token = token;\n            let currentUser = await JoblyApi.getUser(username);\n            setCurrentUser(currentUser);\n            setApplicationIds(new Set(currentUser.applications));\n          } catch (err) {\n            console.error(\"App loadUserInfo: problem loading\", err);\n            setCurrentUser(null);\n          }\n        }\n        setIsLoading(true);\n      }\n\n      // set infoLoaded to false while async getCurrentUser runs; once the\n      // data is fetched (or even if an error happens!), this will be set back\n      // to false to control the spinner.\n\n      setIsLoading(false);\n      getCurrentUser();\n    },\n    [token]\n  );\n\n  async function getCompany(handle) {\n    const company = await JoblyApi.getCompany(handle);\n    return company;\n  }\n\n  async function register(data) {\n    try {\n      let token = await JoblyApi.register(data);\n      setToken(token);\n      return { success: true };\n    } catch (err) {\n      return { sucess: false, errors: err };\n    }\n  }\n\n  async function login(data) {\n    try {\n      let token = await JoblyApi.login(data);\n      setToken(token);\n      return { success: true };\n    } catch (err) {\n      return { sucess: false, errors: err };\n    }\n  }\n\n  function logout() {\n    setCurrentUser(null);\n    setToken(null);\n  }\n\n  /** Checks if a job has been applied for. */\n  function hasAppliedToJob(id) {\n    return applicationIds.has(id);\n  }\n\n  /** Apply to a job: make API call and update set of application IDs. */\n  function applyToJob(id) {\n    if (hasAppliedToJob(id)) return;\n    JoblyApi.applyToJob(currentUser.username, id);\n    setApplicationIds(new Set([...applicationIds, id]));\n  }\n\n  if (!isLoading) return <h3>Loading...</h3>;\n\n  return (\n    <div className=\"App\">\n      <userContext.Provider\n        value={{ currentUser, setCurrentUser, hasAppliedToJob, applyToJob }}\n      >\n        <BrowserRouter>\n          <NavBar logout={logout} />\n          <Routes login={login} getCompany={getCompany} register={register} />\n        </BrowserRouter>\n      </userContext.Provider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}